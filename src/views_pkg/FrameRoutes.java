/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views_pkg;

import controller_pkg.ConexionController;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sebastian Echeverry
 */
public class FrameRoutes extends javax.swing.JFrame {
    
    ConexionController con;
    Connection cn;
    Statement st;
    ResultSet rs;
    DefaultTableModel model;

    /**
     * Creates new form FrameRoutes
     */
    public FrameRoutes() {
        try {
            this.con = new ConexionController();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrameRoutes.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FrameRoutes.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        setLocationRelativeTo(null);
        show_routes();
        
        Date date = new Date();
        
        int actual_month = date.getMonth() + 1;
        int actual_year = date.getYear() + 1900;
        
        txt_startMonth.setText(""+ actual_month);
        txt_startYear.setText(""+ actual_year);
        txt_endMonth.setText(""+ actual_month);
        txt_endYear.setText(""+ actual_year);
        
        txt_startMonth.disable();
        txt_endMonth.disable();
        txt_startYear.disable();
        txt_endYear.disable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_startPlace = new javax.swing.JTextField();
        txt_endPlace = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txt_km = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        lb_emailSession = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        lb_idSession = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        btn_logoff = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txt_startDay = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txt_startMonth = new javax.swing.JTextField();
        txt_startYear = new javax.swing.JTextField();
        txt_startHour = new javax.swing.JTextField();
        txt_startMinutes = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        txt_endDay = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txt_endMonth = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        txt_endYear = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txt_endHour = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        txt_endMinutes = new javax.swing.JTextField();
        btn_infoDates = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btn_add = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_routes = new javax.swing.JTable();
        lb_showRoutes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Rutas");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Punto de inicio: ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Punto de llegada:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Kilometros recorridos:");

        txt_km.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_kmKeyTyped(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel17.setText("inicio de sesión como:");

        lb_emailSession.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        lb_emailSession.setText("correo");

        jLabel18.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel18.setText("ID del usuario:");

        lb_idSession.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        lb_idSession.setText("id");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("ID de la ruta:");

        txt_id.setEnabled(false);

        btn_logoff.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        btn_logoff.setText("Cerrar sesión");
        btn_logoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_logoffActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Fecha de inicio:");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel21.setText("Fecha de llegada:");

        txt_startDay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_startDayKeyTyped(evt);
            }
        });

        jLabel22.setText("Día");

        jLabel23.setText("Mes");

        jLabel24.setText("Año");

        jLabel25.setText("Hora");

        jLabel26.setText("Minutos");

        txt_startMonth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_startMonthKeyTyped(evt);
            }
        });

        txt_startYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_startYearKeyTyped(evt);
            }
        });

        txt_startHour.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_startHourKeyTyped(evt);
            }
        });

        txt_startMinutes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_startMinutesKeyTyped(evt);
            }
        });

        jLabel27.setText("Día");

        txt_endDay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_endDayKeyTyped(evt);
            }
        });

        jLabel28.setText("Mes");

        txt_endMonth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_endMonthKeyTyped(evt);
            }
        });

        jLabel29.setText("Año");

        txt_endYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_endYearKeyTyped(evt);
            }
        });

        jLabel30.setText("Hora");

        txt_endHour.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_endHourKeyTyped(evt);
            }
        });

        jLabel31.setText("Minutos");

        txt_endMinutes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_endMinutesKeyTyped(evt);
            }
        });

        btn_infoDates.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btn_infoDates.setText("info");
        btn_infoDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_infoDatesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lb_emailSession, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lb_idSession, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94)
                        .addComponent(btn_logoff))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_endDay, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_endMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel29)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_endYear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_endHour, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_endMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_infoDates))
                            .addComponent(jLabel20)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txt_endPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel16)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txt_km, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txt_startPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_startDay, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel23)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_startMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel24)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_startYear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel25)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_startHour, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel26)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_startMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(lb_emailSession)
                    .addComponent(jLabel18)
                    .addComponent(lb_idSession))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_logoff)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_startPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_endPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txt_km, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(27, 27, 27)
                .addComponent(jLabel20)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_startDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26)
                    .addComponent(txt_startMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_startYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_startHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_startMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(btn_infoDates))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_endDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29)
                    .addComponent(jLabel30)
                    .addComponent(jLabel31)
                    .addComponent(txt_endMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_endYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_endHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_endMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        btn_add.setText("Agregar ruta");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_edit.setText("Editar ruta");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_delete.setText("Eliminar ruta");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_add)
                    .addComponent(btn_edit)
                    .addComponent(btn_delete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbl_routes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "KM", "Punto de inicio", "Punto de llegada", "Fecha de inicio", "Fecha de lleaga"
            }
        ));
        tbl_routes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_routesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_routes);
        if (tbl_routes.getColumnModel().getColumnCount() > 0) {
            tbl_routes.getColumnModel().getColumn(0).setMinWidth(25);
            tbl_routes.getColumnModel().getColumn(0).setPreferredWidth(25);
            tbl_routes.getColumnModel().getColumn(0).setMaxWidth(35);
            tbl_routes.getColumnModel().getColumn(1).setMinWidth(30);
            tbl_routes.getColumnModel().getColumn(1).setPreferredWidth(30);
            tbl_routes.getColumnModel().getColumn(1).setMaxWidth(40);
        }

        lb_showRoutes.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        lb_showRoutes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_showRoutes.setText("Haga click AQUI  1 sola vez, en caso de que no se vean las rutas en la tabla");
        lb_showRoutes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lb_showRoutesMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(lb_showRoutes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lb_showRoutes, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        // TODO add your handling code here:
        add_route();
    }//GEN-LAST:event_btn_addActionPerformed

    private void txt_kmKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_kmKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_kmKeyTyped

    private void tbl_routesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_routesMouseClicked
        // TODO add your handling code here:
        int row = tbl_routes.getSelectedRow();
        System.out.println(row);
        if (row >= 0) {
            int id = Integer.parseInt(tbl_routes.getValueAt(row, 0).toString());
            int km = Integer.parseInt(tbl_routes.getValueAt(row, 1).toString());
            String start_place = tbl_routes.getValueAt(row, 2).toString();
            String end_place = tbl_routes.getValueAt(row, 3).toString();
            String start_date = tbl_routes.getValueAt(row, 4).toString();
            String end_date = tbl_routes.getValueAt(row, 5).toString();
            System.out.println(id + " - " + km + " - " + start_place + " - " + end_place + " - " + start_date + " - " + end_date);
            
            txt_startPlace.setText(start_place);
            txt_endPlace.setText(end_place);
            txt_km.setText("" + km);
            txt_id.setText("" + id);
        }
    }//GEN-LAST:event_tbl_routesMouseClicked

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        // TODO add your handling code here:
        edit_route();
    }//GEN-LAST:event_btn_editActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        delete_route();
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_logoffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_logoffActionPerformed
        // TODO add your handling code here:
        FrameMenu ventana = new FrameMenu();
        ventana.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_logoffActionPerformed

    private void lb_showRoutesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lb_showRoutesMouseClicked
        // TODO add your handling code here:
        show_routes();
    }//GEN-LAST:event_lb_showRoutesMouseClicked
    
    /**
     * Metodo para que solo se puedan escribir numeros en el campo de texto "Fechca de inicio - dia"
     * @param evt 
     */
    private void txt_startDayKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_startDayKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_startDayKeyTyped

    /**
     * Metodo para que solo se puedan escribir numeros en el campo de texto "Fechca de inicio - mes"
     * @param evt 
     */
    private void txt_startMonthKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_startMonthKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_startMonthKeyTyped

    /**
     * Metodo para que solo se puedan escribir numeros en el campo de texto "Fechca de inicio - año"
     * @param evt 
     */
    private void txt_startYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_startYearKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_startYearKeyTyped

    /**
     * Metodo para que solo se puedan escribir numeros en el campo de texto "Fechca de inicio - hora"
     * @param evt 
     */
    private void txt_startHourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_startHourKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_startHourKeyTyped

    /**
     * Metodo para que solo se puedan escribir numeros en el campo de texto "Fechca de inicio - minutos"
     * @param evt 
     */
    private void txt_startMinutesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_startMinutesKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_startMinutesKeyTyped

    /**
     * Metodo para que solo se puedan escribir numeros en el campo de texto "Fechca de llegada - dia"
     * @param evt 
     */
    private void txt_endDayKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_endDayKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_endDayKeyTyped

    /**
     * Metodo para que solo se puedan escribir numeros en el campo de texto "Fechca de llegada - mes"
     * @param evt 
     */
    private void txt_endMonthKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_endMonthKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_endMonthKeyTyped

    /**
     * Metodo para que solo se puedan escribir numeros en el campo de texto "Fechca de llegada - año"
     * @param evt 
     */
    private void txt_endYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_endYearKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_endYearKeyTyped

    /**
     * Metodo para que solo se puedan escribir numeros en el campo de texto "Fechca de llegada - hora"
     * @param evt 
     */
    private void txt_endHourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_endHourKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_endHourKeyTyped

    /**
     * Metodo para que solo se puedan escribir numeros en el campo de texto "Fechca de llegada - minutos"
     * @param evt 
     */
    private void txt_endMinutesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_endMinutesKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c < '0' || c > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_endMinutesKeyTyped

    private void btn_infoDatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_infoDatesActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Los campos de texto para mes y año estan deshabilitados y con un valor predefinido los cuales son el mes y año actuales"
                + "\n Tenga en cuenta que:"
                + "\n - La fecha de salida no puede ser mayor a la fecha actual"
                + "\n - La fecha de salida no puede ser mayor a la fecha de llegada"
                + "\n - No puede ingresar fechas superiores a la de el dia, mes y año actual"
                + "\n - No puede ingresar fechas inferiores a la del mes y año actual");
    }//GEN-LAST:event_btn_infoDatesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameRoutes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameRoutes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameRoutes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameRoutes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameRoutes().setVisible(true);
            }
        });
    }
    
    
    /**
     * Metodo para mostrar en la tabla las rutas agregadas que hay en la base de datos correspondientes a la persona que inicio sesion
     */
    public void show_routes(){
   
        String email = lb_emailSession.getText();
        int id_cyclist = get_idCyclist(email);
        String query = "SELECT * FROM tb_route WHERE id_cyclist = '" + id_cyclist + "' ";
        try{
            cn = con.getConnection();
            st = cn.createStatement();
            rs = st.executeQuery(query);
            Object[] route;
            route = new Object[6];
            model = (DefaultTableModel)tbl_routes.getModel();
            while(rs.next()){
                route[0] = rs.getInt("id");
                route[1] = rs.getInt("km");
                route[2] = rs.getString("start_place");
                route[3] = rs.getString("end_place");
                route[4] = rs.getString("start_date");
                route[5] = rs.getString("end_date");
                model.addRow(route);
            }
            tbl_routes.setModel(model);
        }catch(SQLException e){
            System.out.println("No se encontraron registros de rutas " + e);
        }
    }
    
    
    /**
     * Metodo para agregar una ruta a un en la base de dato (la ruta se agrega al ciclista que haya iniciado sesion)
     */
    public void add_route(){
        
        int id_cyclist = Integer.parseInt(lb_idSession.getText());
        String start_place = txt_startPlace.getText();
        String end_place = txt_endPlace.getText();
        int km = Integer.parseInt(txt_km.getText());
        int start_day = Integer.parseInt(txt_startDay.getText());
        int start_month = Integer.parseInt(txt_startMonth.getText());
        int start_year = Integer.parseInt(txt_startYear.getText());
        int start_hour = Integer.parseInt(txt_startHour.getText());
        int start_minutes = Integer.parseInt(txt_startMinutes.getText());
        int end_day = Integer.parseInt(txt_endDay.getText());
        int end_month = Integer.parseInt(txt_endMonth.getText());
        int end_year = Integer.parseInt(txt_endYear.getText());
        int end_hour = Integer.parseInt(txt_endHour.getText());
        int end_minutes = Integer.parseInt(txt_endMinutes.getText());
        
        if(start_place.isEmpty() || end_place.isEmpty() || txt_km.getText()=="" || txt_startDay.getText()=="" || txt_startMonth.getText()=="" || txt_startYear.getText()=="" || txt_startHour.getText()=="" || txt_startMinutes.getText()=="" || txt_endDay.getText()=="" || txt_endMonth.getText()=="" || txt_endYear.getText()=="" || txt_endHour.getText()=="" || txt_endMinutes.getText()==""){
            JOptionPane.showMessageDialog(null, "Faltan campos por diligenciar");
            
        } else if(check_valid_endtDate(end_day, end_month, end_year, end_hour, end_minutes) == false){
            JOptionPane.showMessageDialog(null, "Ingrese una fecha de llegada valida"
                    + "\n - La fecha de llegada no puede ser mayor a la fecha actual");
        } else if(check_valid_startDate(start_day, start_month, start_year, start_hour, start_minutes, end_day, end_month, end_year, end_hour, end_minutes) == false) {
            JOptionPane.showMessageDialog(null, "Ingrese una fecha de salida valida"
                    + "\n - La fecha de salida no puede ser mayor a la fecha actual"
                    + "\n - La fecha de salida no puede ser mayor a la fecha de llegada");
        } else {
            
            String start_date = get_string_startDate(start_day, start_month, start_year, start_hour, start_minutes);
            String end_date = get_string_endDate(end_day, end_month, end_year, end_hour, end_minutes);
            
            String query = "INSERT INTO tb_route(id_cyclist, start_place, end_place, start_date, end_date, km) VALUES ('" + id_cyclist + "','" + start_place + "','" + end_place + "','" + start_date + "','" + end_date + "','" + km + "')";
            try {
                cn = con.getConnection();
                st = cn.createStatement();
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(null, "Ruta guardada exitosamente");
                clear_txtFields();
                clear_rows_table();
                show_routes();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "No se pudo guardar la ruta "); 
                System.out.println("No se pudo guardar la ruta " + e);
            }
        } 
                    
    }
    
    
    /**
     * Metodo para editar la ruta seleccionada en la tabla
     */
    public void edit_route(){
        int row_routes = tbl_routes.getSelectedRow();
        if (row_routes < 0) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar una ruta en la tabla tabla");
        }else{
            int id = Integer.parseInt(txt_id.getText());
            String start_place = txt_startPlace.getText();
            String end_place = txt_endPlace.getText();
            int km = Integer.parseInt(txt_km.getText());
            int start_day = Integer.parseInt(txt_startDay.getText());
            int start_month = Integer.parseInt(txt_startMonth.getText());
            int start_year = Integer.parseInt(txt_startYear.getText());
            int start_hour = Integer.parseInt(txt_startHour.getText());
            int start_minutes = Integer.parseInt(txt_startMinutes.getText());
            int end_day = Integer.parseInt(txt_endDay.getText());
            int end_month = Integer.parseInt(txt_endMonth.getText());
            int end_year = Integer.parseInt(txt_endYear.getText());
            int end_hour = Integer.parseInt(txt_endHour.getText());
            int end_minutes = Integer.parseInt(txt_endMinutes.getText());
            
            if(start_place.isEmpty() || end_place.isEmpty() || txt_km.getText().isEmpty() || txt_startDay.getText().isEmpty() || txt_startMonth.getText().isEmpty() || txt_startYear.getText().isEmpty() || txt_startHour.getText().isEmpty() || txt_startMinutes.getText().isEmpty() || txt_endDay.getText().isEmpty() || txt_endMonth.getText().isEmpty() || txt_endYear.getText().isEmpty() || txt_endHour.getText().isEmpty() || txt_endMinutes.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Faltan campos por diligenciar");
            
            } else if(check_valid_endtDate(end_day, end_month, end_year, end_hour, end_minutes) == false){
                JOptionPane.showMessageDialog(null, "Ingrese una fecha de llegada valida"
                        + "\n - La fecha de llegada no puede ser mayor a la fecha actual");
            } else if(check_valid_startDate(start_day, start_month, start_year, start_hour, start_minutes, end_day, end_month, end_year, end_hour, end_minutes) == false) {
                JOptionPane.showMessageDialog(null, "Ingrese una fecha de salida valida"
                        + "\n - La fecha de salida no puede ser mayor a la fecha actual"
                        + "\n - La fecha de salida no puede ser mayor a la fecha de llegada");
            } else {
                String start_date = get_string_startDate(start_day, start_month, start_year, start_hour, start_minutes);
                String end_date = get_string_endDate(end_day, end_month, end_year, end_hour, end_minutes);
                try{
                    String query = "UPDATE tb_route SET start_place='" + start_place +"', end_place= '" + end_place + "', start_date= '" + start_date + "', end_date= '" + end_date + "', km= '" + km +"' WHERE id = " + id;            
                    cn = con.getConnection();
                    st = cn.createStatement();
                    st.executeUpdate(query);
                    clear_rows_table();
                    JOptionPane.showMessageDialog(null, "Se ha actualizado la ruta exitosamente");
                    clear_txtFields();
                    show_routes();
                }catch(SQLException e){
                    JOptionPane.showMessageDialog(null, "No se pudo actualizar la información de la ruta");
                    System.out.println("No se pudo actualizar la información de la ruta " + e);
                }
            }
        }
    }
    
    
    /**
     * Metodo para eliminar la ruta seleccionada en la tabla de la base de datos
     */
    void delete_route(){
        int row_routes = tbl_routes.getSelectedRow();
        int id = Integer.parseInt(txt_id.getText());
        if(row_routes < 0){
            JOptionPane.showMessageDialog(null, "Debes seleccionar una ruta en la tabla tabla");
        } else {
            String query = "DELETE FROM tb_route WHERE id = " + id;
            try{
                cn = con.getConnection();
                st = cn.createStatement();
                st.executeUpdate(query);
                clear_rows_table();
                JOptionPane.showMessageDialog(null, "Se ha eliminado la ruta exitosamente");
                clear_txtFields();
                show_routes();
            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, "No se pudo eliminar la ruta");
                System.out.println("No se pudo eliminar la ruta " + e);
            }
        }
    }
    
    
    /**
     * Metodo que verifica si la fecha de inicio ingresada es valida con respecto a la fecha de llegada ingresada, es decir, que no se pueda ingresar una fecha de salida mayor a la fecha de llegada, y que la fecha ingresada no sea mayor a la fecha actual
     * @param day - dia de la fecha de inicio de la ruta
     * @param month - mes de la fecha de inicio de la ruta
     * @param year año de la fecha de inicio de la ruta
     * @param hour - hora de la fecha de inicio de la ruta
     * @param minutes - minutos de la fecha de inicio de la ruta
     * @param end_day - dia de la fecha de llegada de la ruta
     * @param end_month - mes de la fecha de llegada de la ruta
     * @param end_year - año de la fecha de llegada de la ruta
     * @param end_hour - hora de la fecha de llegada de la ruta
     * @param end_minutes - minutos de la fecha de llegada de la ruta
     * @return true si la fecha es valida, y false en el caso contrario
     */
    public boolean check_valid_startDate(int day, int month, int year, int hour, int minutes, int end_day,int end_month, int end_year, int end_hour, int end_minutes){
        Date actual = new Date();
        int actual_year = actual.getYear() + 1900;
        int actual_month = actual.getMonth() + 1;
        int actual_day = actual.getDate();
        int actual_hour = actual.getHours();
        int actual_minutes = actual.getMinutes();
        Date max_date = new Date(end_year, end_month, end_day, end_hour, end_minutes);
        Date min_date = new Date(actual_year, actual_month, 1, 0, 0);
        Date start_date = new Date(year, month, day, hour, minutes);
        
        if(start_date.getTime() >= max_date.getTime() || start_date.getTime() < min_date.getTime()){
            return false;
        }else {
            return true;
        }
    }
    
    
    /**
     * Metodo que verifica si la fecha de llegada ingresada es valida, la fecha de llegada no puede ser menor a la fecha de salida y tampoco puede ser mayor a la fecha actual
     * @param day - dia de la fecha de llegada de la ruta
     * @param month - mes de la fecha de llegada de la ruta
     * @param year - año de la fecha de llegada de la ruta
     * @param hour - hora de la fecha de llegada de la ruta
     * @param minutes - minutos de la fecha de llegada de la ruta
     * @return true si la fecha es valida, y false en el caso contrario
     */
    public boolean check_valid_endtDate(int day, int month, int year, int hour, int minutes){
        
        Date actual = new Date();
        int actual_year = actual.getYear() + 1900;
        int actual_month = actual.getMonth() + 1;
        int actual_day = actual.getDate();
        int actual_hour = actual.getHours();
        int actual_minutes = actual.getMinutes();
        Date max_date = new Date(actual_year, actual_month, actual_day, actual_hour, actual_minutes);
        Date min_date = new Date(actual_year, actual_month, 1, 0, 0);
        Date end_date = new Date(year, month, day, hour, minutes);   
        
        if(end_date.getTime() > max_date.getTime() || end_date.getTime() < min_date.getTime()){
            return false;
        }else {
            return true;
        }
    }
    
    
    /**
     * Metodo para obtener una cadena de texto de la fecha de inicio de la ruta
     * @param day - dia de la fecha de inicio de la ruta
     * @param month - mes de la fecha de inicio de la ruta
     * @param year año de la fecha de inicio de la ruta
     * @param hour - hora de la fecha de inicio de la ruta
     * @param minutes - minutos de la fecha de inicio de la ruta
     * @return String con la fecha ingresada de inicio en el formato "dd/MM/yyyy HH:mm" (las horas en formato militar) (Ej. 03/09/2021 12:00)
     */
    public String get_string_startDate(int day, int month, int year, int hour, int minutes){
        Date date = new Date(year, month, day, hour, minutes);
        SimpleDateFormat sdf_date = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        
        return sdf_date.format(date);
    }
    
    
    /**
     * Metodo para obtener una cadena de texto de la fecha de llegada de la ruta
     * @param day - dia de la fecha de llegada de la ruta
     * @param month - mes de la fecha de llegada de la ruta
     * @param year año de la fecha de llegada de la ruta
     * @param hour - hora de la fecha de llegada de la ruta
     * @param minutes - minutos de la fecha de llegada de la ruta
     * @return String con la fecha ingresada de llegada en el formato "dd/MM/yyyy HH:mm" (las horas en formato militar) (Ej. 03/09/2021 14:15)
     */
    public String get_string_endDate(int day, int month, int year, int hour, int minutes){
        Date date = new Date(year, month, day, hour, minutes);
        SimpleDateFormat sdf_date = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        
        return sdf_date.format(date);
    }
        
    
    //Metodo para eliminar una fila de la tabla
    void clear_rows_table(){
        for(int i=0; i<tbl_routes.getRowCount(); i++) {
            model.removeRow(i);
            i -= 1;
        }
    }
       
    
    //Metodo para limbiar los campos de texto y resetear los valores de los spinners
    public void clear_txtFields() {
        txt_startPlace.setText("");
        txt_endPlace.setText("");
        txt_km.setText("");
        txt_startDay.setText("");
        txt_startHour.setText("");
        txt_startMinutes.setText("");
        txt_endDay.setText("");
        txt_endHour.setText("");
        txt_endMinutes.setText("");             
    }
    
    
    /**
     * Metodo para obtener el id de un ciclista segun su email
     * @param email
     * @return 
     */
    public int get_idCyclist(String email){
        int id_cyclist = 0;
        String query = "SELECT id FROM tb_cyclist WHERE email = '" + email + "' ";
        try{
            cn = con.getConnection();
            st = cn.createStatement();
            rs = st.executeQuery(query);
            
            if(rs.next()){
                id_cyclist = rs.getInt("id");
            }
        } catch(SQLException e){
            System.out.println("id no encontrado" + e);
        }
        return id_cyclist;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_infoDates;
    private javax.swing.JButton btn_logoff;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel lb_emailSession;
    public javax.swing.JLabel lb_idSession;
    private javax.swing.JLabel lb_showRoutes;
    private javax.swing.JTable tbl_routes;
    private javax.swing.JTextField txt_endDay;
    private javax.swing.JTextField txt_endHour;
    private javax.swing.JTextField txt_endMinutes;
    private javax.swing.JTextField txt_endMonth;
    private javax.swing.JTextField txt_endPlace;
    private javax.swing.JTextField txt_endYear;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_km;
    private javax.swing.JTextField txt_startDay;
    private javax.swing.JTextField txt_startHour;
    private javax.swing.JTextField txt_startMinutes;
    private javax.swing.JTextField txt_startMonth;
    private javax.swing.JTextField txt_startPlace;
    private javax.swing.JTextField txt_startYear;
    // End of variables declaration//GEN-END:variables
}
