/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views_pkg;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import controller_pkg.ConexionController;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author Sebastian Echeverry
 */
public class FrameRegister extends javax.swing.JFrame {
    
    ConexionController con;
    Connection cn;
    Statement st;
    ResultSet rs;
    DefaultTableModel model;

    /**
     * Creates new form FrameRegister
     */
    public FrameRegister() {
        try {
            this.con = new ConexionController();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrameRegister.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FrameRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        lb_asteriskDocument.setVisible(false);
        lb_asteriskEmail.setVisible(false);
        lb_asteriskPassword.setVisible(false);
        lb_error.setVisible(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lb_error = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        txt_document = new javax.swing.JTextField();
        txt_email = new javax.swing.JTextField();
        lb_asteriskPassword = new javax.swing.JLabel();
        lb_asteriskEmail = new javax.swing.JLabel();
        txt_confirmPassword = new javax.swing.JPasswordField();
        txt_password = new javax.swing.JPasswordField();
        lb_asteriskDocument = new javax.swing.JLabel();
        btn_helpPassword = new javax.swing.JButton();
        btn_showPassword = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        btn_register = new javax.swing.JButton();
        btn_return = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Registro");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Nombre:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Documento:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Correo:");

        lb_error.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lb_error.setForeground(new java.awt.Color(255, 0, 0));
        lb_error.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_error.setText("mensaje error");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Contraseña:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("<html>Confirmar contraseña:</html>");

        txt_email.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_emailFocusLost(evt);
            }
        });

        lb_asteriskPassword.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lb_asteriskPassword.setForeground(new java.awt.Color(255, 0, 0));
        lb_asteriskPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_asteriskPassword.setText("*");

        lb_asteriskEmail.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lb_asteriskEmail.setForeground(new java.awt.Color(255, 0, 0));
        lb_asteriskEmail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_asteriskEmail.setText("*");

        txt_confirmPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_confirmPasswordKeyReleased(evt);
            }
        });

        lb_asteriskDocument.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lb_asteriskDocument.setForeground(new java.awt.Color(255, 0, 0));
        lb_asteriskDocument.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_asteriskDocument.setText("*");

        btn_helpPassword.setFont(new java.awt.Font("Tahoma", 3, 10)); // NOI18N
        btn_helpPassword.setText("?");
        btn_helpPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_helpPasswordActionPerformed(evt);
            }
        });

        btn_showPassword.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btn_showPassword.setText("Mostrar");
        btn_showPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_showPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lb_asteriskDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lb_asteriskEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lb_asteriskPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btn_helpPassword)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txt_document, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(txt_email, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_password, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_confirmPassword, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_name))
                        .addGap(18, 18, 18)
                        .addComponent(btn_showPassword))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(lb_error, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_document, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_asteriskDocument))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_asteriskEmail))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_helpPassword)
                    .addComponent(btn_showPassword))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lb_asteriskPassword))
                    .addComponent(txt_confirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(lb_error)
                .addContainerGap())
        );

        btn_register.setText("Registrarse");
        btn_register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_registerActionPerformed(evt);
            }
        });

        btn_return.setText("Regresar");
        btn_return.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_returnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_register, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_return, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_register)
                    .addComponent(btn_return))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_returnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_returnActionPerformed
        // TODO add your handling code here:
        FrameMenu ventana = new FrameMenu();
        ventana.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_returnActionPerformed

    private void txt_confirmPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_confirmPasswordKeyReleased
        // TODO add your handling code here:
        if(check_confirmPassword(String.valueOf(txt_password.getPassword()), String.valueOf(txt_confirmPassword.getPassword()))) {
            lb_asteriskPassword.setVisible(false);
            lb_error.setVisible(false);
        }else {
            lb_error.setText("Las contraseñas no coinciden");
            lb_asteriskPassword.setVisible(true);
            lb_error.setVisible(true);
        }
    }//GEN-LAST:event_txt_confirmPasswordKeyReleased

    private void txt_emailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_emailFocusLost
        // TODO add your handling code here:
        if(check_valid_email(txt_email.getText())){
            lb_asteriskEmail.setVisible(false);
            lb_error.setVisible(false);
        }else {
            lb_error.setText("Correo electronico invalido");
            lb_asteriskEmail.setVisible(true);
            lb_error.setVisible(true);
        }
    }//GEN-LAST:event_txt_emailFocusLost

    private void btn_registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_registerActionPerformed
        // TODO add your handling code here:
        add_cyclist();
    }//GEN-LAST:event_btn_registerActionPerformed

    private void btn_helpPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_helpPasswordActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "La contraseña debe cumplir los siguientes requisitos: "
                + "\n - Debe tener al menos 8 caracteres."
                + "\n - Debe tener al menos una letra minuscula y una mayuscula."
                + "\n - No puede tener espacios en blanco");
    }//GEN-LAST:event_btn_helpPasswordActionPerformed

    private void btn_showPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_showPasswordActionPerformed
        // TODO add your handling code here:
        if(btn_showPassword.isSelected()){
            txt_password.setEchoChar((char)0);
            txt_confirmPassword.setEchoChar((char)0);
        }else {
            txt_password.setEchoChar('*');
            txt_confirmPassword.setEchoChar('*');
        }
    }//GEN-LAST:event_btn_showPasswordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameRegister().setVisible(true);
            }
        });
    }
    
    
    /**
     * Metodo para agregar un nuevo ciclista a la base de datos
     */
    public void add_cyclist() {
        
        String name = txt_name.getText();
        String document = txt_document.getText();
        String email = txt_email.getText();
        String password = String.valueOf(txt_password.getPassword());
        String confirm_password = String.valueOf(txt_confirmPassword.getPassword());
     
        if (name.isEmpty() || document.isEmpty() || password.isEmpty() || email.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Faltan campos por diligenciar");
            
        } else if(check_confirmPassword(password, confirm_password) == false){
            JOptionPane.showMessageDialog(null, "Las contraseñas ingresadas no coinciden");
            
        } else if(check_valid_email(email) == false){
            JOptionPane.showMessageDialog(null, "Ingrese un correo electronico valido");
            
        } else if (check_valid_password(password) == false){
            JOptionPane.showMessageDialog(null, "Ingrese una contraseña valida, la contraseña debe cumplir los siguientes requisitos: "
                + "\n - Debe tener al menos 8 caracteres."
                + "\n - Debe tener al menos una letra minuscula y una mayuscula."
                + "\n - No puede tener espacios en blanco");
        } else {
            if (check_repeated_email(email) == false && check_repeated_document(document) == false){
                String query = "INSERT INTO tb_cyclist(name, document, password, email) VALUES ('" + name + "','" + document + "','" + password + "','" + email + "')";
                try {
                    cn = con.getConnection();
                    st = cn.createStatement();
                    st.executeUpdate(query);
                    JOptionPane.showMessageDialog(null, "Se ha registrado exitosamente");
                    lb_asteriskDocument.setVisible(false);
                    lb_asteriskEmail.setVisible(false);
                    clear_txtFields();
                    FrameLogin ventana = new FrameLogin();
                    ventana.setVisible(true);
                    this.dispose();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "No se pudo crear el registro" + e);
                }
            } else if(check_repeated_email(email) == true && check_repeated_document(document) == false) {
                JOptionPane.showMessageDialog(null, "El correo electronico ingresado ya se encuentra registrado");
                lb_asteriskEmail.setVisible(true);
                
            } else if(check_repeated_email(email) == false && check_repeated_document(document) == true){
                JOptionPane.showMessageDialog(null, "El documento ingresado ya se encuentra registrado");
                lb_asteriskDocument.setVisible(true);
                
            } else {
                JOptionPane.showMessageDialog(null, "El documento y el correo electronico ingresados ya se encuentran registrados");
                lb_asteriskDocument.setVisible(true);
                lb_asteriskEmail.setVisible(true);
            }
        }
    }
    
    
    /**
     * Metodo para verificar si un correo electronico ya esta en uso en la base de datos
     * @param email - correo electronico que el ciclista intenta registrar
     * @return true si el email ya se encuentra registrado en la base de datos, y false en el caso contrario
     */
    public boolean check_repeated_email(String email) {
        
        String query = "SELECT * FROM tb_cyclist WHERE email = '" + email + "' ";
        try{
            cn = con.getConnection();
            st = cn.createStatement();
            rs = st.executeQuery(query);
            
            return rs.next();
        } catch(SQLException e){
            System.out.println("email no registrado" + e);
        }
        return true;
    }
    
    
    /**
     * Metodo para verificar si un numero de documento ya esta en uso en la base de datos
     * @param document - numero de documento que el ciclista intenta registrar
     * @return true si el documento ya se encuentra registrado en la base de datos, y false en el caso contrario
     */
    public boolean check_repeated_document(String document) {
        
        String query = "SELECT * FROM tb_cyclist WHERE document = '" + document + "' ";
        try{
            cn = con.getConnection();
            st = cn.createStatement();
            rs = st.executeQuery(query);
            
            return rs.next();
        } catch(SQLException e){
            System.out.println("documento no registrado" + e);
        }
        return true;
    }
    
    
    /**
     * Metodo para verificar si un correo electronico es valido, es decir, que contenga un @, dominio y termine en .com, .co, etc
     * @param email - correo electronico el cual se quiere saber si es valido o no
     * @return true si el correo electronico es valido, y false en el caso contrario
     */
    public boolean check_valid_email(String email){    
        Pattern pat = Pattern.compile("^[_A_Za-z0-9-\\+]+(\\.[_A_Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        Matcher mat = pat.matcher(email);
        return mat.find();
    }
    
    /**
     * Metodo para verificar si una contraseña es valida
     * @param password - contraseña la cual se desea verificar si es valida o no
     * La cotraseña debe tener al menos 8 caracteres, al menos una letra en minuscula y en mayuscula y la contraseña no puede tener espacios en blanco
     * @return true si la contraseña es valida, y false en el caso contrario
     */
    public boolean check_valid_password(String password){
        Pattern pat = Pattern.compile("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=\\S+$).{8,}$");
        Matcher mat = pat.matcher(password);
        return mat.find();
    }
    
    
    /**
     * Metodo para verificar si la contraseña coincide con confirmar contraseña
     * @param password
     * @param confirm_password
     * @return true si las contraseñas coinciden, y false en el caso contrario
     */
    public boolean check_confirmPassword(String password, String confirm_password){    
        return password.equals(confirm_password);
    }
    
    
    //Metodo para limpiar los campos de texto
    public void clear_txtFields(){
        txt_name.setText("");
        txt_document.setText("");
        txt_email.setText("");
        txt_password.setText("");
        txt_confirmPassword.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_helpPassword;
    private javax.swing.JButton btn_register;
    private javax.swing.JButton btn_return;
    private javax.swing.JToggleButton btn_showPassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lb_asteriskDocument;
    private javax.swing.JLabel lb_asteriskEmail;
    private javax.swing.JLabel lb_asteriskPassword;
    private javax.swing.JLabel lb_error;
    private javax.swing.JPasswordField txt_confirmPassword;
    private javax.swing.JTextField txt_document;
    private javax.swing.JTextField txt_email;
    private javax.swing.JTextField txt_name;
    private javax.swing.JPasswordField txt_password;
    // End of variables declaration//GEN-END:variables
}
